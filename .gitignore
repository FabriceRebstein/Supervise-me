import streamlit as st

st.set_page_config(page_title= "Supervise Me",
                   page_icon= ':bar_chart')

def intro():
    import streamlit as st

    st.write("# Welcome to SuperviseMe")
    st.sidebar.success("Select a function.")

    st.markdown(
        """
        Supervise me is a match maker between students and supervisors for the university of St-Gallen

        Welcome to Supervise Me, the innovative platform designed to seamlessly connect students with the ideal teachers for their bachelor or master thesis supervision. Our app streamlines the matching process by carefully considering each teacher's area of expertise and preferred subjects to ensure that every student receives personalized guidance tailored to their academic needs. Whether you are embarking on your final thesis project or looking for expert insights to shape your research, Supervise Me is here to facilitate these crucial academic partnerships, paving the way for successful scholarly achievements.

        -->Select a function to start!<--
        

       
    """
    )
def Supervise_me()
    import openai
    import streamlit as st
    import pandas as pd
    import re

    # Initialize the Streamlit app
    st.title("ðŸ’¬ Supervise-Me")
    st.caption("ðŸš€ Please enter your API key, message, and upload a CSV file.")

# Securely input the API key
    apiKey = st.text_input("Enter your API key", type="password")
    if apiKey:
        client = openai.OpenAI(api_key=apiKey)

    # Get user input
        prompt = st.text_input("Enter your message")

    # File upload
        uploaded_file = st.file_uploader("Upload a CSV file containing keywords", type=['csv'])
        if uploaded_file:
        # Read the uploaded CSV file
         df = pd.read_csv(uploaded_file)
        # Read keyword column, convert to lower and create unique set
            csv_keywords = {kw.lower().strip() for kw in df['keywords'].dropna().unique()}

            if prompt:
             response = client.chat.completions.create(
                 model="gpt-3.5-turbo",
                    messages=[
                        {
                            "role": "user",
                            "content": f"give me 10 keywords, following this criteria: {prompt}",
                        }
                    ],
                )

                print(response)
                if response.choices:
                     # Extract content from the first choice's message
                    keywords = response.choices[0].message.content

                    # Split the content into individual keywords
                    # Ignore enumerate returned by openai and convert to lower case
                    openai_keywords = set(re.sub(r'^\d+\.\s*', '', kw).lower().strip() for kw in keywords.split('\n'))

                    # Display the extracted keywords from OpenAI
                    st.write("Extracted Keywords from OpenAI:", ', '.join(openai_keywords))

                    # Display the keywords from the CSV file
                    st.write("Keywords from CSV file:", ', '.join(csv_keywords))

                    # Find intersection of keywords
                    matched_keywords = openai_keywords.intersection(csv_keywords)
                    st.write("Matched Keywords:", ', '.join(matched_keywords))
                else:
                    st.error("No completion choices were returned from OpenAI.")
def Statistics_of_teachers_demo():
    import streamlit as st
    import pandas as pd
    
    st.markdown(f"# {list(page_names_to_funcs.keys())[1]}")


    df = pd.read_excel(r"/Users/thomassabti/Desktop/my_product.xlsx")
   
# Group by 'Teacher' and 'Subject' and count occurrences
    subject_data = df.groupby(['Teacher', 'Subjects']).size().reset_index(name='Count')
# Group by 'Teacher' and 'Area of Expertise' and count occurrences
    expertise_data = df.groupby(['Teacher', 'Area of expertise']).size().reset_index(name='Count')
# Allow selection of a specific teacher to display details
    teacher_selection = st.selectbox("Choose a teacher to filter:", df['Teacher'].unique())
    st.subheader(f"Details for {teacher_selection}")
    filtered_subject_data = subject_data[subject_data['Teacher'] == teacher_selection]
    st.write(filtered_subject_data)
    filtered_expertise_data = expertise_data[expertise_data['Teacher'] == teacher_selection]
    st.write(filtered_expertise_data)

 
    st.header('Subjects Graph')
# Display a bar chart for subjects
    subject_pivot = filtered_subject_data.pivot(index='Subjects', columns='Count', values='Count')
    st.bar_chart(subject_pivot)

    st.header(' Area of expertise Graph')
# Display a bar chart for area of expertise
    expertise_pivot = filtered_expertise_data.pivot(index='Area of expertise', columns='Count', values='Count')
    st.bar_chart(expertise_pivot)

page_names_to_funcs = {
    "Welcome Page": intro,
    "Supervise Me": Supervise_me
    "Statistics of Teacher": Statistics_of_teachers_demo,
    
}
import streamlit as st
demo_name = st.sidebar.selectbox("How can we help you?", page_names_to_funcs.keys())
page_names_to_funcs[demo_name]()
